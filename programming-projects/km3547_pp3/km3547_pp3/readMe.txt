NIM:
For the game of Nim, I began programming from the outside in. I recognized that there was an object called Game that I must create, and within Game, there must be a method called play() that plays the entire game. Within Game I created 5 instance variables: the number of marbles in the game, the human player, the computer player, and the final ints of who’s turn it is. For the play() method I created a random number generator that decides whether the computer or human player goes first. After the decider is initialized, I created a while loop that changes the variable ‘turn’ to HUMAN and invokes the move() method onto the human player, then I invoke the validMove() method onto the move of the human player to check if the amount of marbles taken by the human is less than half and greater than 1. If the human chooses an invalid move, the terminal continuously prompts the player to choose a correct move between 1 and half of whatever is left in the pile. At the end of the play() method, I have an if statement that checks whose turn it was when the last marble was taken, printing whether the player lost or won to the terminal.

Within the human class, there are 2 instance variables: choice and a scanner. The move() method that belongs to the Human class simply prompts the user to input the number of marbles they would like to take. The Computer class is similar, but instead of prompting to take marbles, it is all randomized to be a legal move within the rules of Nim.

ZIPCODE:
From the initial tester given to us, I derived 3 things: there must be a class called Zipcode, there must be one constructor that takes in a parameter of type int, and another constructor that takes in a parameter of type String. Within the Zipcode class, I created 2 instance variables for each situation, an int called zip for the zip code, and a string called bar for the barcode. Because of the inverse nature of this program, each operation I made I have an equal and opposite method. 

Beginning the process, in order to turn the zip code into a barcode, I first check for leading zero’s by checking the length of the input string. In order to convert each digit to it’s designated barcode, I created an intToBarcode() method that takes in a parameter of type char, and returns the designated code. When creating the barcode from a zip code you must also calculate the checkDigit, so I created a new method called getCheckDigit() that tests what the closest multiplier of 10 is, and subtracts it from that multiplier to get the check digit.

